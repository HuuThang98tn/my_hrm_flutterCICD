import 'dart:typed_data';
import 'dart:math';
import 'package:flutter/services.dart';
import 'package:image/image.dart' as img;
import 'package:tflite_flutter/tflite_flutter.dart';

/// L·ªõp d·ªãch v·ª• x·ª≠ l√Ω nh·∫≠n di·ªán khu√¥n m·∫∑t s·ª≠ d·ª•ng FaceNet
class FaceNetService {
  Interpreter? _interpreter; // Tr√¨nh th√¥ng d·ªãch TensorFlow Lite

  /// T·∫£i model FaceNet t·ª´ assets
  Future<void> loadModel() async {
    try {
      _interpreter = await Interpreter.fromAsset('assets/facenet.tflite');

      // Hi·ªÉn th·ªã th√¥ng tin debug v·ªÅ model
      final inputTensors = _interpreter!.getInputTensors();
      final outputTensors = _interpreter!.getOutputTensors();

      print("‚úÖ T·∫£i model th√†nh c√¥ng");
      print("üìä Th√¥ng tin Model:");
      for (int i = 0; i < inputTensors.length; i++) {
        print("  ƒê·∫ßu v√†o $i: ${inputTensors[i].shape} (${inputTensors[i].type})");
      }
      for (int i = 0; i < outputTensors.length; i++) {
        print("  ƒê·∫ßu ra $i: ${outputTensors[i].shape} (${outputTensors[i].type})");
      }
    } catch (e) {
      print("‚ùå L·ªói khi t·∫£i model: $e");
      rethrow;
    }
  }

  /// T·∫£i ·∫£nh t·ª´ th∆∞ m·ª•c assets
  Future<img.Image?> _taiAnhTuAssets(String duongDan) async {
    try {
      final data = await rootBundle.load(duongDan);
      final bytes = data.buffer.asUint8List();
      return img.decodeImage(bytes);
    } catch (e) {
      print("L·ªói khi t·∫£i ·∫£nh t·ª´ assets: $e");
      return null;
    }
  }

  /// Ti·ªÅn x·ª≠ l√Ω ·∫£nh: thay ƒë·ªïi k√≠ch th∆∞·ªõc v√† chu·∫©n h√≥a
  Float32List _tienXuLyAnh(img.Image anh) {
    // Thay ƒë·ªïi k√≠ch th∆∞·ªõc v·ªÅ 160x160 pixels cho FaceNet
    final anhDaThayDoiKichThuoc = img.copyResize(anh, width: 160, height: 160);

    // T·∫°o buffer ƒë·∫ßu v√†o [1 * 160 * 160 * 3]
    final dauVao = Float32List(1 * 160 * 160 * 3);
    int chiSo = 0;

    // Duy·ªát qua t·ª´ng pixel c·ªßa ·∫£nh
    for (int y = 0; y < 160; y++) {
      for (int x = 0; x < 160; x++) {
        final pixel = anhDaThayDoiKichThuoc.getPixel(x, y);

        // S·ª≠ d·ª•ng API m·ªõi c·ªßa th∆∞ vi·ªán image ƒë·ªÉ l·∫•y gi√° tr·ªã RGB
        final r = (pixel.r * 255).round(); // ƒê·ªè
        final g = (pixel.g * 255).round(); // Xanh l√°
        final b = (pixel.b * 255).round(); // Xanh d∆∞∆°ng

        // Chu·∫©n h√≥a gi√° tr·ªã pixel v·ªÅ kho·∫£ng [-1, 1] cho FaceNet
        dauVao[chiSo++] = (r - 127.5) / 127.5;
        dauVao[chiSo++] = (g - 127.5) / 127.5;
        dauVao[chiSo++] = (b - 127.5) / 127.5;
      }
    }

    return dauVao;
  }

  /// L·∫•y embedding (vector ƒë·∫∑c tr∆∞ng) cho m·ªôt ·∫£nh
  Future<List<double>> layEmbedding(String duongDanAsset) async {
    if (_interpreter == null) {
      throw Exception("Model ch∆∞a ƒë∆∞·ª£c t·∫£i");
    }

    final anh = await _taiAnhTuAssets(duongDanAsset);
    if (anh == null) {
      throw Exception("Kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´: $duongDanAsset");
    }

    try {
      // Ti·ªÅn x·ª≠ l√Ω ·∫£nh th√†nh Float32List
      final dauVao = _tienXuLyAnh(anh);

      // T·∫°o buffer ƒë·∫ßu ra cho embedding 128 chi·ªÅu
      final dauRa = Float32List(1 * 128);

      print("ƒêang ch·∫°y inference cho: $duongDanAsset");
      print("K√≠ch th∆∞·ªõc ƒë·∫ßu v√†o: ${dauVao.length}, K√≠ch th∆∞·ªõc ƒë·∫ßu ra: ${dauRa.length}");

      // Ch·∫°y suy lu·∫≠n tr√™n model
      _interpreter!.run(dauVao, dauRa);

      // Tr·∫£ v·ªÅ vector embedding
      return dauRa.cast<double>();
    } catch (e) {
      print("L·ªói khi l·∫•y embedding cho $duongDanAsset: $e");

      // Th·ª≠ ph∆∞∆°ng ph√°p thay th·∫ø v·ªõi c·∫•u tr√∫c List l·ªìng nhau
      return await _layEmbeddingThayThe(anh);
    }
  }

  /// Ph∆∞∆°ng ph√°p thay th·∫ø s·ª≠ d·ª•ng c·∫•u tr√∫c List l·ªìng nhau
  Future<List<double>> _layEmbeddingThayThe(img.Image anh) async {
    try {
      final anhDaThayDoiKichThuoc = img.copyResize(anh, width: 160, height: 160);

      // T·∫°o ƒë·∫ßu v√†o v·ªõi c·∫•u tr√∫c [batch][chi·ªÅu cao][chi·ªÅu r·ªông][k√™nh m√†u]
      final dauVao = <List<List<List<double>>>>[];
      final batch = <List<List<double>>>[];

      for (int y = 0; y < 160; y++) {
        final hang = <List<double>>[];
        for (int x = 0; x < 160; x++) {
          final pixel = anhDaThayDoiKichThuoc.getPixel(x, y);

          final r = (pixel.r * 255).round();
          final g = (pixel.g * 255).round();
          final b = (pixel.b * 255).round();

          // C√°c k√™nh RGB ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a
          final cacKenh = [
            (r - 127.5) / 127.5, // ƒê·ªè
            (g - 127.5) / 127.5, // Xanh l√°
            (b - 127.5) / 127.5, // Xanh d∆∞∆°ng
          ];

          hang.add(cacKenh);
        }
        batch.add(hang);
      }
      dauVao.add(batch);

      // C·∫•u tr√∫c ƒë·∫ßu ra [batch][embedding]
      final dauRa = <List<double>>[];
      dauRa.add(List.filled(128, 0.0));

      print(
        "Ph∆∞∆°ng ph√°p thay th·∫ø - H√¨nh d·∫°ng ƒë·∫ßu v√†o: [${dauVao.length}, ${dauVao[0].length}, ${dauVao[0][0].length}, ${dauVao[0][0][0].length}]",
      );

      _interpreter!.run(dauVao, dauRa);

      return dauRa[0];
    } catch (e) {
      print("Ph∆∞∆°ng ph√°p thay th·∫ø th·∫•t b·∫°i: $e");
      throw Exception("Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh v·ªõi model n√†y: $e");
    }
  }

  /// T√≠nh kho·∫£ng c√°ch Euclidean gi·ªØa hai vector
  double khoangCachEuclidean(List<double> vector1, List<double> vector2) {
    if (vector1.length != vector2.length) {
      throw Exception("ƒê·ªô d√†i c√°c vector ph·∫£i b·∫±ng nhau");
    }

    double tong = 0.0;
    for (int i = 0; i < vector1.length; i++) {
      tong += pow(vector1[i] - vector2[i], 2);
    }
    return sqrt(tong);
  }

  /// T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng cosine gi·ªØa hai vector
  double doTuongDongCosine(List<double> vector1, List<double> vector2) {
    if (vector1.length != vector2.length) {
      throw Exception("ƒê·ªô d√†i c√°c vector ph·∫£i b·∫±ng nhau");
    }

    double tichVoHuong = 0.0, chuanVector1 = 0.0, chuanVector2 = 0.0;
    for (int i = 0; i < vector1.length; i++) {
      tichVoHuong += vector1[i] * vector2[i];
      chuanVector1 += vector1[i] * vector1[i];
      chuanVector2 += vector2[i] * vector2[i];
    }

    final mauSo = sqrt(chuanVector1) * sqrt(chuanVector2);
    return mauSo == 0 ? 0 : tichVoHuong / mauSo;
  }

  /// Gi·∫£i ph√≥ng t√†i nguy√™n
  void giaiPhong() {
    _interpreter?.close();
  }
}
